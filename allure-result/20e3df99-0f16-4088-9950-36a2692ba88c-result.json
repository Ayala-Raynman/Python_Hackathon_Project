{"name": "Verify result of calculator", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable", "trace": "func = <staticmethod object at 0x00000288CF4D3848>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n    \n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n            sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n>                                          sigcls=Signature)\n\nc:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\inspect.py:1126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nobj = <staticmethod object at 0x00000288CF4D3848>\n\n    def _signature_from_callable(obj, *,\n                                 follow_wrapper_chains=True,\n                                 skip_bound_arg=True,\n                                 sigcls):\n    \n        \"\"\"Private helper function to get signature for arbitrary\n        callable objects.\n        \"\"\"\n    \n        if not callable(obj):\n>           raise TypeError('{!r} is not a callable object'.format(obj))\nE           TypeError: <staticmethod object at 0x00000288CF4D3848> is not a callable object\n\nc:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\inspect.py:2208: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_cases.test_desktop.Test_Desktop object at 0x00000288CF509948>\n\n    @allure.title(\"Verify result of calculator\")\n    @allure.description(\"This test verify that the calculation result is equal to the result we expected\")\n    def test_01_calc(self):\n>       Calculator.calc_str(os.getenv(\"Exercise for calculation\"))\n\ntest_desktop.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\allure_commons\\utils.py:308: in func_parameters\n    arg_spec = getargspec(func) if six.PY2 else inspect.getfullargspec(func)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfunc = <staticmethod object at 0x00000288CF4D3848>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n    \n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n            sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature)\n        except Exception as ex:\n            # Most of the times 'signature' will raise ValueError.\n            # But, it can also raise AttributeError, and, maybe something\n            # else. So to be fully backwards compatible, we catch all\n            # possible exceptions here, and reraise a TypeError.\n>           raise TypeError('unsupported callable') from ex\nE           TypeError: unsupported callable\n\nc:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\inspect.py:1132: TypeError"}, "description": "This test verify that the calculation result is equal to the result we expected", "start": 1640726050457, "stop": 1640726050457, "uuid": "9756f6a9-2b7c-4dcc-901f-d216f24eb64d", "historyId": "3b00a19285262f165cea0ba5b4aa3f53", "testCaseId": "fc946e7aef81eb3bbee10145a18cf98b", "fullName": "test_desktop.Test_Desktop#test_01_calc", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_desktop')"}, {"name": "suite", "value": "test_desktop"}, {"name": "subSuite", "value": "Test_Desktop"}, {"name": "host", "value": "AYALA-R-5981"}, {"name": "thread", "value": "20388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_desktop"}]}